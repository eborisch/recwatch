# MIT License
# 
# Copyright (c) 2017 Mayo Clinic
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Define entries into the pre-existing dictionary of JOBS. This file is python
# code which is run within an isolated environment by recwatch.py during 
# initial configuration parsing.
#
# The keys used for indexing the JOBS dictionary are a tuple of the form:
#
#     ('watch directory', 'watch file pattern') 
#
# Where 'watch directory' is relative to the specified BASE PATH (--prefix_dir)
# location, and 'watch file pattern' is a file pattern glob ('foo', of 'foo*',
# for example, that will be monitored for. When a file matching the 'watch
# file pattern' appears in <BASE PATH>/<watch directory>, the directories listed
# in the file are processed as jobs.
#
# The values in the JOBS dictionary are JobDescription objects:
#  JobDescription(name,
#                 files=tuple(),
#                 pre_command=None,
#                 post_command="touch done",
#                 command=None,
#                 priority=0,
#                 timeout=3600)
#
# name:  String used to identify in logs
# files: Optional TUPLE of file globs which need to be present before excuting
#        the job.  It will wait up to 5s for these files to appear. These are
#        availble for substitution into (pre_,post_,)command strings with
#        python's {} notation.
# pre_command, post_command, command:
#     Optional string or tuple or tuple of strings (or None) to be executed;
#     each string consists of the excutable name (potentially with path) and
#     arguments to be passed.  First pre_command, then command, and finally
#     post_command are executed in order, with continuation dependent on a
#     zero-valued (successful) exit code from the previous command.
# priority: Integer [0 .. 19], 0 = highest priority. If a lower priority job
#     is running when a higher priority job is detected, the lower priority job
#     is paused (but still memory resident) until the higher priority job
#     finishes.
# timeout: Integer seconds. The running job will be killed if it continues for
#     longer than this time. (Time spent paused due to priority is not included
#     in the runtime calculation.)

JD = JobDescription # Just to save space

# This job will detect a file called 'listdir' in the root ('.') of the 
# specified BASE PATH (--prefix_dir) directory. For each job directory X listed
# in this file, it will (in X) execute 'ls' and store its output in X/recon.log
#
# If completed without failure, X/done is created 
#
# Testing: (operating within the BASE PATH)
# mkdir test
# touch test/file1 test/file2
# echo test > listdir
# 
# Contents of test/recon.log:
#> # 2017-10-11 14:04:08.700571: [List Job:MAIN] in [<BASE PATH>/test]: Processing.
#> # 2017-10-11 14:04:08.700833: [List Job:MAIN] in [<BASE PATH>/test]: Running command: ['ls']
#> file1
#> file2
#> recon.log
#> # 2017-10-11 14:04:08.709005: [List Job:POST] in [<BASE PATH>/test]: Running command: ['touch', 'done']
#> # 2017-10-11 14:04:08.717627: Processing completed.

JOBS[('.', 'listdir')] = JD('List Job', command='ls')

# If a file inside the job directory is named *.md5, it will first be checked
# (with md5sum -c <file> ) to ensure that the checksums are valid. The md5sum
# command's output is stored in md5_done on success, and md5_bad on failure.
#
# Continuing from above:
# cd test && md5sum file1 file2 > data.md5
# cd ..
# echo test > listdir

# This will now watch for files named 'listdir' in <BASE PATH>/subdir/, and
# will run jobs in <BASE PATH>/subdir/<job dir>.
JOBS[('subdir', 'listdir')] = JD('Subdirectory List Job', command='ls')
# Subdirectories can be useful for separate projects, for example.

# A job that exists quickly to demonstrate priorities
JOBS[('.', 'fast')] = JD('Fast job', command='sleep 1')

# Priorities are posix-style; 0 = highest; 19 = lowest. Whan a higher priority
# job arrives, it PAUSES any runnning lower priority job until it completes,
# at which point it resumes the lower priority job. THERE IS CURRENTLY NO
# RESOURCE UTILIZATION CHECK, so care must be taken -- espcially if many 
# priority levels are used with resource intensive tasks. (Only one job from
# any priority queue may be running at a time, but you could have 20 different
# jobs (one each for 0-19) where 19 are paused, but consuming memory, and one
# running. Jobs are also "niced" to the priority level.

JOBS[('.', 'slow')] = JD('Slow job', command='sleep 10', priority=1)

# You can enforce a maximum time (in seconds) that a command can run. Defaults
# to one hour.
JOBS[('.', 'expire')] = JD('Timeout test',
                           # Commands can also be a tuple of strings
                           command=('date', 'sleep 60'),
                           timeout=5)

# Shell pipelines can be run by executing the shell directly. For complex
# pipelines or conditionals, you are likely better served by making a shell
# script to describe the flow, and then call that directly.
JOBS[('.', 'shell')] = JD('Shell job',
                          command='sh -c "ps -Af | grep python"')

JOBS[('.', 'filetest')] = JD('File testing',
                             files=('*.md5',),
                             command='cat {}')

# vim: filetype=python:sw=4:ts=4:et:
